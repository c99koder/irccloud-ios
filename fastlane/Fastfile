# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
#update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.102.0"

default_platform :ios
xcode_select("/Applications/Xcode-beta.app")
def app_vers
  File.read('../build-scripts/VERSION').split('\n')[0].strip
end

platform :ios do
  desc "Check all certs and provisioning profiles from github"
  lane :certs do
    app_root = "com.irccloud."
    for type in ["development"] do
      match(type: type, app_identifier: [
        "#{app_root}IRCCloud",
        "#{app_root}IRCCloud.ShareExtension",
        "#{app_root}IRCCloud.NotificationService",
        "#{app_root}enterprise",
        "#{app_root}enterprise.ShareExtension",
        "#{app_root}enterprise.NotificationService"
       ])
    end
  end

  desc "Generate new push certs"
  lane :apn do |options|
    if options[:enterprise]
        bundle_id = "com.irccloud.enterprise"
    else
        bundle_id = "com.irccloud.IRCCloud"
    end

    get_push_certificate(
      generate_p12: false,
      app_identifier: bundle_id
    )
  end

  desc "Build and push to iTunes Connect"
  lane :push do |options|
    if options[:enterprise]
        ipa = "IRCEnterprise.ipa"
        scheme = "IRCCloud Enterprise"
        bundle_id = "com.irccloud.enterprise"
        profile_root = "App Store Enterprise"
    else
        ipa = "IRCCloud.ipa"
        scheme = "IRCCloud"
        bundle_id = "com.irccloud.IRCCloud"
        profile_root = "App Store"
    end
    
    # Set a build number manually if provided
    # TODO pull this from the Info.plist
    default_build_number = "GIT_VERSION"
    if options[:build]
        sh "cd .. && agvtool new-version -all #{options[:build]}"
    end
    
    # Build an ipa
    gym(
      scheme: scheme,
      configuration: "AppStore",
      export_method: "app-store",
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          "#{bundle_id}" => "#{profile_root}",
          "#{bundle_id}.ShareExtension" => "#{profile_root} ShareExtension",
          "#{bundle_id}.NotificationService" => "#{profile_root} NotificationService",
        }
      }
    )
    
    # Reset the build number
    if options[:build]
        sh "cd .. && agvtool new-version -all #{default_build_number}"
    end
    
    # Upload to iTunes Connect
    deliver(
        ipa: ipa,
        skip_metadata: true,
        skip_screenshots: true
    )
  end

  desc "Print version"
  lane :vers do
    UI.success "Version: #{app_vers()}"
  end
  
  desc "Take screenshots"
  lane :screenshots do
    snapshot(
      clear_previous_screenshots: true,
      skip_open_summary: true,
      clean: true,
      derived_data_path: "./build",
      devices: ["iPhone X", "iPhone 6 Plus", "iPhone Xs Max"],
      ios_version: "12.2",
      launch_arguments: ["-bigphone YES"]
    )
    snapshot(
      clear_previous_screenshots: false,
      skip_open_summary: true,
      derived_data_path: "./build",
      test_without_building: true,
      devices: [
      "iPhone 5s",
      "iPhone 6s",
      "iPad Pro (9.7-inch)",
      "iPad Pro (10.5-inch)",
      "iPad Pro (11-inch)",
      "iPad Pro (12.9-inch) (2nd generation)"
      ],
      ios_version: "12.2"
    )
    frameit()
    notification(
      subtitle: "screenshots",
      message: "iOS screenshots complete",
      activate: "com.googlecode.iterm2"
    )
  end

  desc "Upload metadata"
  lane :metadata do |options|
    fastlane_require 'json'
    review_info = JSON.parse(File.read('review_info.json'))
    review_info['notes'] = File.read('metadata/review_notes.txt')

    if options[:enterprise]
        metadata_path = "./fastlane/metadata-enterprise"
        app_identifier = "com.irccloud.enterprise"
        review_info['notes'] = File.read('metadata-enterprise/review_notes.txt')
    else
        metadata_path = "./fastlane/metadata"
        app_identifier = "com.irccloud.IRCCloud"
    end
    
    skip_screenshots = !options[:screenshots]
    
    app_version = options[:app_version] || app_vers()
    deliver(
        app_version: app_version,
        app_identifier: app_identifier,
        skip_binary_upload: true,
        skip_screenshots: skip_screenshots,
        metadata_path: metadata_path,
        app_review_information: review_info,
        automatic_release: true
    )
  end

  desc "Make sure all devices are added to the ad-hoc profile"
  lane :updateadhoc do
    match(type: "adhoc", force_for_new_devices: true, app_identifier: "com.irccloud.IRCCloud")
    match(type: "adhoc", force_for_new_devices: true, app_identifier: "com.irccloud.IRCCloud.ShareExtension")
    match(type: "adhoc", force_for_new_devices: true, app_identifier: "com.irccloud.IRCCloud.NotificationService")
  end

  desc "Build and upload an ad-hoc release to Crashlytics"
  lane :beta do
    match(type: "adhoc", readonly: true, app_identifier: "com.irccloud.IRCCloud")
    match(type: "adhoc", readonly: true, app_identifier: "com.irccloud.IRCCloud.ShareExtension")
    match(type: "adhoc", readonly: true, app_identifier: "com.irccloud.IRCCloud.NotificationService")
    
    root_directory = "#{File.expand_path(File.dirname(__FILE__))}/../"
    CRASHLYTICS_TOKEN=Fastlane::Actions.sh_control_output("grep CRASHLYTICS_TOKEN #{root_directory}IRCCloud/config.h | awk '{print $3}' | sed 's/\"//g'",print_command_output: false).strip
    CRASHLYTICS_SECRET=Fastlane::Actions.sh_control_output("grep CRASHLYTICS_SECRET #{root_directory}IRCCloud/config.h | awk '{print $3}' | sed 's/\"//g'",print_command_output: false).strip

    raise "Missing Crashlytics API key" unless CRASHLYTICS_TOKEN != ''
    raise "Missing Crashlytics API secret" unless CRASHLYTICS_SECRET != ''

    notes = prompt(text: "Release Notes: ", multi_line_end_keyword: "$")

    gym(scheme: "IRCCloud", export_method: "ad-hoc", clean: true, configuration: "Release")
    crashlytics(api_token: CRASHLYTICS_TOKEN, build_secret: CRASHLYTICS_SECRET, groups: ["irccloud","ios-testers","ios-public-beta"], notes: notes)

    gym(scheme: "IRCCloud Enterprise", export_method: "ad-hoc", clean: true, configuration: "Release")
    crashlytics(api_token: CRASHLYTICS_TOKEN, build_secret: CRASHLYTICS_SECRET, groups: ["irccloud","ios-enterprise"], notes: notes)
  end

end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
#
